
-- generated by elm_rs


module Bindings exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type ToBackend
    = SaveNewDocumentSender { newSender : Maybe (String) }


toBackendEncoder : ToBackend -> Json.Encode.Value
toBackendEncoder enum =
    case enum of
        SaveNewDocumentSender { newSender } ->
            Json.Encode.object [ ( "SaveNewDocumentSender", Json.Encode.object [ ( "new_sender", Maybe.withDefault Json.Encode.null << Maybe.map (Json.Encode.string) newSender ) ] ) ]

